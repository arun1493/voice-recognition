import { StatusCodes } from "http-status-codes";

const WHITE_LISTED_ORIGINS = [
  "http://localhost:3003",
  "https://web-app-v2.suki-dev.com",
  "https://web-app-v2.suki-test.com",
  "https://web-app-v2.suki-stage.com",
  "https://web-app-v2.suki.ai",
  "https://web-api-v2.suki-dev.com",
  "https://web-api-v2.suki-test.com",
  "https://web-api-v2.suki-stage.com",
  "https://web-api-v2.suki.ai",
  "https://app.suki-dev.com",
  "https://app.suki-test.com",
  "https://app.suki-stage.com",
  "https://app.suki.ai"
];

const SUKI_ORGANIZATION_ID = "11111111-1111-1111-1111-111111111111";

const SUKI_E2E_TESTING_ORGANIZATION_ID = "22222222-2222-2222-2222-222222222222";

const REVOKED_TOKENS_IN_REDIS = "revoked-access-tokens";

const NOTE_STATUS = {
  IMPORTED_FROM_EMR: "IMPORTED_FROM_EMR",
  INCOMPLETE: "INCOMPLETE",
  NEED_DOCTOR_SIGN_OFF: "NEED_DOCTOR_SIGN_OFF",
  NEEDS_REVIEW: "NEEDS_REVIEW",
  SCRIBE_IS_DONE: "SCRIBE_IS_DONE",
  SUBMITTED_TO_EMR: "SUBMITTED_TO_EMR",
  USER_IS_DONE: "USER_IS_DONE"
};

enum Gender {
  FEMALE = 1,
  MALE = 2,
  UNKNOWN = 0
}

const ERROR_STATEMENTS = {
  [StatusCodes.BAD_REQUEST]: "Bad Request",
  [StatusCodes.CONFLICT]: "Conflict",
  [StatusCodes.INTERNAL_SERVER_ERROR]: "Internal server error",
  [StatusCodes.NOT_FOUND]: "Not Found",
  [StatusCodes.UNAUTHORIZED]: "Authorization Failed"
};

const PLATFORMS = {
  MOBILE: "mobile",
  WEB: "web"
};

const EMR_DESTINATION = {
  DOCUMENT: "DOCUMENT",
  DOCUMENT_NEEDS_SIGNOFF: "DOCUMENT_NEEDS_SIGNOFF",
  ENCOUNTER: "ENCOUNTER", // Open  EMR encounter
  ENCOUNTER_NEEDS_SIGNOFF: "ENCOUNTER_NEEDS_SIGNOFF",
  SUKI_ONLY: "SUKI_ONLY", // No EMR
  UNKNOWN: "UNKNOWN"
};

enum Destination {
  // Destination is unknown. It should never be in this state
  UNKNOWN = 0,

  // Append data to an open encounter
  ENCOUNTER = 1,

  // Submit data as a document (e.g. PDF for Athena)
  DOCUMENT = 2,

  // Don't submit anything to the EMR, just keep the note in Suki
  SUKI_ONLY = 3,

  // Submit data to an open encounter but requires doctor signoff first
  ENCOUNTER_NEEDS_SIGNOFF = 4,

  // Submit data as document but requires doctor signoff first
  DOCUMENT_NEEDS_SIGNOFF = 5
}

enum Specialty {
  NA = 0,
  ALLERGY_AND_IMMUNOLOGY = 1,
  ANESTHESIOLOGY = 2,
  CARDIOLOGY = 3,
  CRITICAL_CARE = 4,
  DERMATOLOGY = 5,
  EMERGENCY_MEDICINE = 6,
  ENDOCRINOLOGY = 7,
  FAMILY_MEDICINE = 8,
  GASTROENTEROLOGY = 9,
  GENETICS = 10,
  HEMATOLOGY = 11,
  INFECTIOUS_DISEASE = 12,
  INTERNAL_MEDICINE = 13,
  MEDICAL_ONCOLOGY = 14,
  NEPHROLOGY = 15,
  NEUROLOGY = 16,
  NEUROSURGERY = 17,
  NUCLEAR_MEDICINE = 18,
  OBSTETRICS_GYNECOLOGY = 19,
  OPHTHALMOLOGY = 20,
  ORTHOPEDIC_SURGERY = 21,
  OTOLARYNGOLOGY_HEAD_AND_NECK = 22,
  PALLIATIVE_MEDICINE = 23,
  PAIN_MANAGEMENT = 24,
  PATHOLOGY = 25,
  PEDIATRICS = 26,
  PHYSICAL_MEDICINE_AND_REHABILITATION = 27,
  PLASTIC_SURGERY = 28,
  PODIATRY = 29,
  PREVENTATIVE_MEDICINE = 30,
  PSYCHIATRY = 31,
  PULMONOLOGY = 32,
  RADIATION_ONCOLOGY = 33,
  RADIOLOGY_DIAGNOSTIC = 34,
  RADIOLOGY_INTERVENTIONAL = 35,
  RHEUMATOLOGY = 36,
  SPORTS_MEDICINE = 37,
  SURGERY_CARDIAC_AND_THORACIC = 38,
  SURGERY_COLON_AND_RECTAL = 39,
  SURGERY_GENERAL = 40,
  SURGERY_PEDIATRIC = 41,
  SURGERY_VASCULAR = 42,
  UROLOGY = 43,
  UNLISTED_MEDICAL = 44,
  UNLISTED_SURGICAL = 45
}

const CONTENT_TYPE = {
  DYNAMIC: "DYNAMIC",
  STATIC: "STATIC",
  UNKNOWN: "UNKNOWN"
};

const OPS_STATUS = {
  INVALID: "INVALID",
  NEEDS_OPS_PROCESSING: "NEEDS_OPS_PROCESSING",
  NO_OPS_PROCESSING_REQUIRED: "NO_OPS_PROCESSING_REQUIRED",
  OPS_PROCESSED: "OPS_PROCESSED"
};

enum SectionUpdatePath {
  WHOLE = 0,
  ONLY_DIAGNOSIS = 1
}

const DYNAMIC_CHARTS_DATA_TYPES = {
  AGE: "AGE",
  ALANINE_AMINOTRANSFERASE: "ALANINE_AMINOTRANSFERASE",
  ALBUMIN: "ALBUMIN",
  ALKALINE_PHOSPHATASE: "ALKALINE_PHOSPHATASE",
  ALLERGIES: "ALLERGIES",
  ASPARTATE_AMINOTRANSFERASE: "ASPARTATE_AMINOTRANSFERASE",
  BILIRUBIN_TOTAL: "BILIRUBIN_TOTAL",
  BLOOD_PRESSURE: "BLOOD_PRESSURE",
  BMI: "BMI",
  CARBON_DIOXIDE: "CARBON_DIOXIDE",
  CHIEF_COMPLAINT: "CHIEF_COMPLAINT",
  CHLORIDE: "CHLORIDE",
  CHOLESTEROL_HDL: "CHOLESTEROL_HDL",
  CHOLESTEROL_LDL: "CHOLESTEROL_LDL",
  CREATININE: "CREATININE",
  CURRENT_MEDICATION: "CURRENT_MEDICATION",
  DEFAULT: "DEFAULT",
  ERYTHROCYTES: "ERYTHROCYTES",
  GLUCOSE: "GLUCOSE",
  FIRST_NAME: "FIRST_NAME",
  GENDER: "GENDER",
  HEART_RATE: "HEART_RATE",
  HEIGHT: "HEIGHT",
  HEMATOCRIT: "HEMATOCRIT",
  HEMOGLOBIN: "HEMOGLOBIN",
  HEMOGLOBIN_A1C: "HEMOGLOBIN_A1C",
  INR: "INR",
  LAST_NAME: "LAST_NAME",
  LEUKOCYTES: "LEUKOCYTES",
  PAST_MEDICAL_HISTORY: "PAST_MEDICAL_HISTORY",
  PAST_SURGICAL_HISTORY: "PAST_SURGICAL_HISTORY",
  PLATELETS: "PLATELETS",
  POTASSIUM: "POTASSIUM",
  PROSTATE_ANTIGEN: "PROSTATE_ANTIGEN",
  PROTEIN: "PROTEIN",
  PULSE_OXIMETRY: "PULSE_OXIMETRY",
  RESPIRATORY_RATE: "RESPIRATORY_RATE",
  SODIUM: "SODIUM",
  TEMPERATURE: "TEMPERATURE",
  TOTAL_CHOLESTEROL: "TOTAL_CHOLESTEROL",
  TRIGLYCERIDES: "TRIGLYCERIDES",
  UREA: "UREA",
  WEIGHT: "WEIGHT"
};

const VITALS_CHARTS_DATA_TYPES = [
  DYNAMIC_CHARTS_DATA_TYPES.BLOOD_PRESSURE,
  DYNAMIC_CHARTS_DATA_TYPES.HEART_RATE,
  DYNAMIC_CHARTS_DATA_TYPES.TEMPERATURE,
  DYNAMIC_CHARTS_DATA_TYPES.RESPIRATORY_RATE,
  DYNAMIC_CHARTS_DATA_TYPES.PULSE_OXIMETRY,
  DYNAMIC_CHARTS_DATA_TYPES.HEIGHT,
  DYNAMIC_CHARTS_DATA_TYPES.WEIGHT,
  DYNAMIC_CHARTS_DATA_TYPES.BMI
];

const LAB_DATA_TYPES = [
  DYNAMIC_CHARTS_DATA_TYPES.ALANINE_AMINOTRANSFERASE,
  DYNAMIC_CHARTS_DATA_TYPES.ALBUMIN,
  DYNAMIC_CHARTS_DATA_TYPES.ALKALINE_PHOSPHATASE,
  DYNAMIC_CHARTS_DATA_TYPES.ASPARTATE_AMINOTRANSFERASE,
  DYNAMIC_CHARTS_DATA_TYPES.BILIRUBIN_TOTAL,
  DYNAMIC_CHARTS_DATA_TYPES.CARBON_DIOXIDE,
  DYNAMIC_CHARTS_DATA_TYPES.CHOLESTEROL_HDL,
  DYNAMIC_CHARTS_DATA_TYPES.CHOLESTEROL_LDL,
  DYNAMIC_CHARTS_DATA_TYPES.CHLORIDE,
  DYNAMIC_CHARTS_DATA_TYPES.CREATININE,
  DYNAMIC_CHARTS_DATA_TYPES.ERYTHROCYTES,
  DYNAMIC_CHARTS_DATA_TYPES.HEMATOCRIT,
  DYNAMIC_CHARTS_DATA_TYPES.HEMOGLOBIN,
  DYNAMIC_CHARTS_DATA_TYPES.HEMOGLOBIN_A1C,
  DYNAMIC_CHARTS_DATA_TYPES.INR,
  DYNAMIC_CHARTS_DATA_TYPES.GLUCOSE,
  DYNAMIC_CHARTS_DATA_TYPES.LEUKOCYTES,
  DYNAMIC_CHARTS_DATA_TYPES.PLATELETS,
  DYNAMIC_CHARTS_DATA_TYPES.POTASSIUM,
  DYNAMIC_CHARTS_DATA_TYPES.PROTEIN,
  DYNAMIC_CHARTS_DATA_TYPES.PROSTATE_ANTIGEN,
  DYNAMIC_CHARTS_DATA_TYPES.SODIUM,
  DYNAMIC_CHARTS_DATA_TYPES.TOTAL_CHOLESTEROL,
  DYNAMIC_CHARTS_DATA_TYPES.TRIGLYCERIDES,
  DYNAMIC_CHARTS_DATA_TYPES.UREA
];

enum RoleType {
  ADMIN = "ADMIN",
  NO_ACCESS = "NO_ACCESS",
  SCRIBE = "SCRIBE",
  USER = "USER"
}

enum EnhancedReviewOptions {
  OFF = "OFF",
  ON = "ON"
}

enum JobStatuses {
  NOT_STARTED = "NOT_STARTED",
  PROCESSING = "PROCESSING",
  COMPLETED = "COMPLETED",
  ERROR = "ERROR"
}

enum SUKI_X_BUCKET_NAMES {
  development = "suki-x-dev",
  test = "suki-x-test",
  stage = "suki-x-stage",
  production = "suki-x-prod"
}

enum FHIR_BUCKET_NAMES {
  development = "config.suki-dev.com",
  test = "config.suki-test.com",
  stage = "config.suki-stage.com",
  production = "config.suki.ai"
}

const DEFAULT_ORGANIZATION_ID = "1234567890";
const DEFAULT_USER_ID = "1234567890";

const ENV_MAP = {
  dev: "https://app.suki-dev.com",
  local: "http://localhost:3003",
  prod: "https://app.suki.ai",
  stage: "https://app.suki-stage.com",
  test: "https://app.suki-test.com"
};

const EMBED_URL = ENV_MAP[process.env.CLOUD_ENVIRONMENT] || ENV_MAP.prod;

const DEFAULT_PAGE_LIMIT = 50;

const CLIENT_METRICS = "client-metrics";

const ENCODING: { BASE64: BufferEncoding; BINARY: BufferEncoding } = {
  BASE64: "base64",
  BINARY: "binary"
};

export {
  CLIENT_METRICS,
  CONTENT_TYPE,
  DEFAULT_ORGANIZATION_ID,
  DEFAULT_PAGE_LIMIT,
  DEFAULT_USER_ID,
  Destination,
  DYNAMIC_CHARTS_DATA_TYPES,
  ENCODING,
  EnhancedReviewOptions,
  EMBED_URL,
  EMR_DESTINATION,
  ENV_MAP,
  ERROR_STATEMENTS,
  FHIR_BUCKET_NAMES,
  Gender,
  JobStatuses,
  LAB_DATA_TYPES,
  NOTE_STATUS,
  OPS_STATUS,
  PLATFORMS,
  REVOKED_TOKENS_IN_REDIS,
  RoleType,
  SectionUpdatePath,
  Specialty,
  SUKI_X_BUCKET_NAMES,
  SUKI_E2E_TESTING_ORGANIZATION_ID,
  SUKI_ORGANIZATION_ID,
  VITALS_CHARTS_DATA_TYPES,
  WHITE_LISTED_ORIGINS
};
